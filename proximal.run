reset;
include common.run;

option solver_msg 0;

option xpress_options 'outlev=0';
option solver amplxpress;

set ITERATIONS default {};

param CUT_RHS{ITERATIONS} default 0;
param CUT_COEFF{ITERATIONS, 1..nVariables} default 0;
param CUT_POINT{ITERATIONS, 1..nVariables} default 0;

param ARRET symbolic default 'NON';

param ITERATION;

# the point used in the bundle
param BUNDLE_POINT{1..nVariables} default 0;
param BUNDLE_UB default +1e20;
param BUNDLE_LB default -1e20;
# tolerance used in the SS or NS 
param BUNDLE_TOL := 0.1;

param NB_SS default 0;
param NB_NS default 0;
param NB_UPDATE default 4;

# weight of the bundle
param BUNDLE_WEIGHT default 1e-1;

# descente prediction
param BUNDLE_PREDICTION;

param BUNDLE_STEP symbolic;

var alpha;

subject to cut{ ite in ITERATIONS}:
	alpha 
	>=
	+CUT_RHS[ite]
	+sum{i in 1..nVariables}CUT_COEFF[ite, i]*(x[i]-CUT_POINT[ite, i])
	;

minimize OBJ:+alpha + BUNDLE_WEIGHT*sum{i in 1..nVariables}(x[i]-BUNDLE_POINT[i])^2;

let ITERATION := 1;
printf "%6s%6s%10s%20s%20s%20s\n", 'ITE', 'STEP','BUNDLE_WEIGHT', 'BUNDLE_LB', 'BUNDLE_UB', 'BUNDLE_PREDICTION';

option gentimes 0;

repeat {
	# nouvelle iteration
	let ITERATIONS := ITERATIONS union {ITERATION };
	
	# calcul du sous estimateur
	solve > trash.log;		

	let BUNDLE_LB := alpha;

	let BUNDLE_PREDICTION := BUNDLE_LB-BUNDLE_UB;

	if nlp_obj - BUNDLE_UB <= BUNDLE_TOL * BUNDLE_PREDICTION or ITERATION==1 then{
		# Serious Step
		let BUNDLE_STEP := 'SS';
		let{i in 1..nVariables} BUNDLE_POINT[i] := x[i];
		let BUNDLE_UB := nlp_obj;
		
		let NB_SS := NB_SS +1;
		let NB_NS := 0;

	}else{
		# Null Step
		let BUNDLE_STEP := 'NS';
		
		let NB_NS := NB_NS +1;
		let NB_SS := 0;

	};
	
	if NB_NS > NB_UPDATE then {
		let NB_NS := 0; 
		let BUNDLE_WEIGHT := BUNDLE_WEIGHT * 2;
	};
	if NB_SS > NB_UPDATE then{
		let NB_SS := 0; 
		let BUNDLE_WEIGHT := BUNDLE_WEIGHT * 0.5;
	};
	let CUT_RHS[ITERATION] := nlp_obj;
	let{i in 1..nVariables}CUT_COEFF[ITERATION, i] := sub_gradient[i];
	let{i in 1..nVariables}CUT_POINT[ITERATION, i] := x[i];		
	#display x;		
	printf "%6d%6s%10.6f%20.6f%20.6f%20.6f\n", ITERATION, BUNDLE_STEP, BUNDLE_WEIGHT, BUNDLE_LB, BUNDLE_UB, BUNDLE_PREDICTION;
	#expand;
	
	if ITERATION>1 and -BUNDLE_PREDICTION <= 1e-6 then {
		let ARRET := 'OUI'
	}else{
		let ITERATION := ITERATION+1;
	};
	
} while ARRET != 'OUI'; 

display x;
display BUNDLE_UB;